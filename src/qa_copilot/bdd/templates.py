from typing import Dict, Any, List, Optional
from pathlib import Path
from jinja2 import Environment, FileSystemLoader, Template


class TemplateEngine:
    """
    Renders BDD features using templates.
    Supports multiple formats: Cucumber, Behave, pytest-bdd
    """

    def __init__(self, template_path: Optional[Path] = None):
        self.template_path = template_path or self._get_default_template_path()
        self.env = Environment(
            loader=FileSystemLoader(self.template_path),
            trim_blocks=True,
            lstrip_blocks=True
        )

        # Default templates if files don't exist
        self.default_templates = {
            "cucumber": self._get_cucumber_template(),
            "behave": self._get_behave_template(),
            "pytest-bdd": self._get_pytest_bdd_template(),
        }

    def render_feature(self, feature: Dict[str, Any], style: str = "cucumber") -> str:
        """
        Render feature to Gherkin format.

        Args:
            feature: Feature dictionary
            style: Template style (cucumber, behave, pytest-bdd)

        Returns:
            Formatted feature string
        """
        try:
            # Try to load template from file
            template = self.env.get_template(f"{style}.feature.j2")
        except:
            # Use default template
            template_str = self.default_templates.get(style, self.default_templates["cucumber"])
            template = Template(template_str)

        return template.render(feature=feature)

    def render_scenario_outline(self, scenario: Dict[str, Any], examples: List[Dict[str, Any]]) -> str:
        """Render a scenario outline with examples"""
        template_str = """
Scenario Outline: {{ scenario.name }}
{%- if scenario.description %}
  {{ scenario.description }}
{%- endif %}
{%- for step in scenario.steps %}
  {{ step.keyword }} {{ step.text }}
{%- endfor %}

  Examples:
    | {{ examples[0].keys() | join(' | ') }} |
{%- for example in examples %}
    | {{ example.values() | join(' | ') }} |
{%- endfor %}
"""
        template = Template(template_str)
        return template.render(scenario=scenario, examples=examples)

    def _get_default_template_path(self) -> Path:
        """Get default template directory"""
        return Path(__file__).parent / "templates"

    def _get_cucumber_template(self) -> str:
        """Default Cucumber template"""
        return """{% for tag in feature.tags -%}
{{ tag }}
{% endfor -%}
Feature: {{ feature.name }}
{%- if feature.description %}
  {{ feature.description }}
{%- endif %}

{%- if feature.background %}

  Background:
{%- for step in feature.background.steps %}
    {{ step.keyword }} {{ step.text }}
{%- endfor %}
{%- endif %}

{% for scenario in feature.scenarios %}
  {%- for tag in scenario.tags %}
  {{ tag }}
  {%- endfor %}
  Scenario: {{ scenario.name }}
{%- if scenario.description %}
    {{ scenario.description }}
{%- endif %}
{%- for step in scenario.steps %}
    {{ step.keyword }} {{ step.text }}
{%- if step.data_table %}
      | {{ step.data_table.headers | join(' | ') }} |
{%- for row in step.data_table.rows %}
      | {{ row | join(' | ') }} |
{%- endfor %}
{%- endif %}
{%- endfor %}
{% endfor %}"""

    def _get_behave_template(self) -> str:
        """Default Behave template"""
        # Similar to cucumber but with minor differences
        return self._get_cucumber_template()

    def _get_pytest_bdd_template(self) -> str:
        """Default pytest-bdd template"""
        return """# Generated by QA Copilot
{% for tag in feature.tags -%}
{{ tag }}
{% endfor -%}
Feature: {{ feature.name }}
{%- if feature.description %}
    \"\"\"{{ feature.description }}\"\"\"
{%- endif %}

{%- if feature.background %}

    Background:
{%- for step in feature.background.steps %}
        {{ step.keyword }} {{ step.text }}
{%- endfor %}
{%- endif %}

{% for scenario in feature.scenarios %}
    {%- for tag in scenario.tags %}
    {{ tag }}
    {%- endfor %}
    Scenario: {{ scenario.name }}
{%- if scenario.description %}
        \"\"\"{{ scenario.description }}\"\"\"
{%- endif %}
{%- for step in scenario.steps %}
        {{ step.keyword }} {{ step.text }}
{%- endfor %}
{% endfor %}"""